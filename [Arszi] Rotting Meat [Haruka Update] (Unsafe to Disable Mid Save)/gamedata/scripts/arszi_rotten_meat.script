local PARENT_STASH = "PARENT_STASH"
local PARENT_NPC = "PARENT_NPC"
local PARENT_ACTOR = "PARENT_ACTOR"
local PARENT_NIL = "PARENT_NIL"
local mcm_id = "arszi_rotten_meat"

local EXPIRATION_HOURS_RAW = 48 --2 days
local EXPIRATION_HOURS_COOKED = 120 -- 5 days

local expiration_table = {}

--Key/Value as Original/Rotten variant
local meat_table = {
    meat_tushkano = "tushkano_cooked_rotten",
    meat_tushkano_b = "tushkano_cooked_rotten",
    meat_tushkano_a = "tushkano_cooked_rotten",

    meat_dog = "dog_cooked_rotten",
    meat_dog_b = "dog_cooked_rotten",
    meat_dog_a = "dog_cooked_rotten",

    meat_pseudodog = "pseudodog_cooked_rotten",
    meat_pseudodog_b = "pseudodog_cooked_rotten",
    meat_pseudodog_a = "pseudodog_cooked_rotten",

    meat_flesh = "flesh_cooked_rotten",
    meat_flesh_b = "flesh_cooked_rotten",
    meat_flesh_a = "flesh_cooked_rotten",

    meat_boar = "boar_cooked_rotten",
    meat_boar_b = "boar_cooked_rotten",
    meat_boar_a = "boar_cooked_rotten",

    meat_bloodsucker = "bloodsucker_cooked_rotten",
    meat_bloodsucker_b = "bloodsucker_cooked_rotten",
    meat_bloodsucker_a = "bloodsucker_cooked_rotten",

    meat_snork = "snork_cooked_rotten",
    meat_snork_b = "snork_cooked_rotten",
    meat_snork_a = "snork_cooked_rotten",

    meat_chimera = "chimera_cooked_rotten",
    meat_chimera_b = "chimera_cooked_rotten",
    meat_chimera_a = "chimera_cooked_rotten",

    meat_lurker = "lurker_cooked_rotten",
    meat_lurker_b = "lurker_cooked_rotten",
    meat_lurker_a = "lurker_cooked_rotten",

    meat_psysucker = "psysucker_cooked_rotten",
    meat_psysucker_b = "psysucker_cooked_rotten",
    meat_psysucker_a = "psysucker_cooked_rotten",

    mutant_part_flesh_meat = "flesh_rotten",
    mutant_part_boar_chop = "boar_rotten",
    mutant_part_dog_meat = "dog_rotten",
    mutant_part_psevdodog_meat = "psevdodog_rotten",
    mutant_part_krovosos_meat = "krovosos_rotten",
    mutant_part_psysucker_meat = "psysucker_rotten",
    mutant_part_snork_hand = "snork_rotten",
    mutant_part_chimera_meat = "chimera_rotten",
    mutant_part_lurker_meat = "lurker_rotten",
    mutant_part_tushkano_meat = "tushkano_rotten"
}

function on_option_change()
    EXPIRATION_HOURS_RAW = ui_mcm.get(mcm_id .. "/expiration_hours_raw")
    EXPIRATION_HOURS_COOKED = ui_mcm.get(mcm_id .. "/expiration_hours_cooked")
end

function on_game_start()
    RegisterScriptCallback("actor_on_item_use", actor_on_item_use)
    RegisterScriptCallback("save_state",save_state)
	RegisterScriptCallback("load_state",load_state)
    RegisterScriptCallback("actor_on_item_take",actor_on_item_take)
    RegisterScriptCallback("actor_on_update", actor_on_update)
    RegisterScriptCallback("on_option_change", on_option_change)
end

--Watchdog: Poll engine if object still exists. Delete entry from expiration_table, if not.
local count = 0
function actor_on_update()
    if (count == 100) then
        count = 0
        for k, v in pairs(expiration_table) do
            if (not alife():object(k)) then
                trace_this("OBJECT became nil, removing from table: "..k.." "..expiration_table[k].section)
                expiration_table[k] = nil
            end
        end

        --Check if items are expired
        check_if_expired()
    end
    count = count + 1
end

function save_state(m_data)
	m_data.expiration_table = expiration_table
end

function load_state(m_data)
	expiration_table = m_data.expiration_table or {}
end

function actor_on_item_take(item)
    if (item and item["id"] and item["section"]) then
        if (meat_table[item:section()] and not expiration_table[item:id()]) then
            
            expiration_table[item:id()] = {
                section = item:section(),
                game_time = game.get_game_time()
            }

            trace_this("ITEM with id: "..item:id().." "..item:section())
        end
    end
end

function actor_on_item_use(obj)
    if (obj and obj["id"] and expiration_table[obj:id()]) then
        expiration_table[obj:id()] = nil
        trace_this("Item used by Actor, remove: "..obj:section())
    end
end

--Returns the parent of the expired item as a flag
function check_expired_items_parent(id)
    local retval = "PARENT_NIL"

    local obj = alife():object(id)
    if (not obj) then trace_this("ERROR - NO OBJ: "..id) return end

    local parent = obj and alife():object(obj.parent_id)

    if (parent) then           
        if (IsInvbox(parent)) then
            retval = PARENT_STASH
        end

        if ((IsStalker(parent) or IsTrader(parent)) and not (parent.id == db.actor:id())) then
            retval = PARENT_NPC
        end

        if (parent.id == db.actor:id()) then
            retval = PARENT_ACTOR
        end
    end

    if (obj and not parent) then
        retval = PARENT_NIL
    end
    
    trace_this("Return parent for: "..id.." "..retval)
    return retval
end

--Checks if any of the meat items, which the actor came in contact are expired
function check_if_expired()
    for k, v in pairs(expiration_table) do
        local difference = game.get_game_time():diffSec(v.game_time)
        local difference_in_hours = difference / 60 / 60

        --Cooked meat
        if (string.match(v.section, "meat_")) then
            if (difference_in_hours > EXPIRATION_HOURS_COOKED) then
                expire_food(k, v.section)
            end
        --Raw Meat
        else
            if (difference_in_hours > EXPIRATION_HOURS_RAW) then
                expire_food(k, v.section)
            end
        end       
    end
end

--Makes meat item expired
function expire_food(id, section)
    trace_this("METHOD EXPIRE FOOD for: "..id.." "..section)
    local rotten_section = meat_table[section]
    local parent = check_expired_items_parent(id)

    if (rotten_section) then

        --Item was dropped or sold. Do not spawn rotten meat item
        if (parent == PARENT_NIL or parent == PARENT_NPC) then
            trace_this("Object: "..id.." "..section.." Does not have parent, or parent is NPC, release only")

            local se_object = alife():object(id)
            if (not se_object) then trace_this("ERROR - NO SE OBJECT FOR: "..id) return end

            trace_this("RELEASE OBJ")
            alife():release(se_object, true)
            expiration_table[id] = nil
            return
        end

        --Item should be still around, spawn rotten meat item, when you will be on the same level (again) as the stash,
        --or instantly, if the item is in the actor's inventory
        if (parent == PARENT_STASH or parent == PARENT_ACTOR) then
            trace_this("Object: "..id.." "..section.." Parent is stash or actor. Release and create rotten meat object")

            local se_object = alife():object(id)
            if (not se_object) then trace_this("ERROR - NO SE OBJECT FOR: "..id) return end
           
            local se_parent = alife():object(se_object.parent_id)
            if (not se_parent) then trace_this("ERROR - NO SE OBJECT FOR PARENT: "..se_object.parent_id) return end

            trace_this("RELEASE OBJ")
            alife():release(se_object, true)
            expiration_table[id] = nil

            trace_this("SPAWN NEW OBJECT")
            if (not se_parent.position) then trace_this("NO POSITION") end
            if (not se_parent.m_level_vertex_id) then trace_this("NO level_vertex_id") end
            if (not se_parent.m_game_vertex_id) then trace_this("NO game_vertex_id") end

            alife():create(rotten_section, se_parent.position, se_parent.m_level_vertex_id, se_parent.m_game_vertex_id, se_parent.id)
            return          
        end
    end
end

--Tracing, comment out method body for release
function trace_this(to_trace)
	--local log_file = io.open("log_arszi_expiration.txt", "a")
	--log_file:write(to_trace.."\n")
	--log_file:close(log_file)
end